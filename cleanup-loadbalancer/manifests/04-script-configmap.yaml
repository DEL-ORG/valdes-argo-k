apiVersion: v1
kind: ConfigMap
metadata:
  name: cleanup-lb-script
  namespace: cleanup-lb
data:
  cleanup_loadbalancers.py: |
    #!/usr/bin/env python3
    import subprocess
    import yaml
    import os
    import sys

    def run_cmd(cmd):
        try:
            return subprocess.check_output(cmd, stderr=subprocess.DEVNULL).decode("utf-8")
        except subprocess.CalledProcessError:
            return ""

    def get_approved_namespaces():
        try:
            with open("/config/approved-namespaces") as f:
                return [ns.strip() for ns in f.read().split(",") if ns.strip()]
        except FileNotFoundError:
            print("Config file missing, defaulting to empty list.")
            return []

    def get_loadbalancer_services():
        output = run_cmd(["kubectl", "get", "svc", "--all-namespaces", "-o", "yaml"])
        if not output:
            print("Failed to get services.")
            sys.exit(1)
        data = yaml.safe_load(output)
        return data.get("items", [])

    def delete_service(namespace, name):
        print(f"ðŸ§¹ Deleting LoadBalancer service: {name} (namespace: {namespace})")
        subprocess.run(["kubectl", "-n", namespace, "delete", "svc", name], stdout=sys.stdout, stderr=sys.stderr)

    def main():
        approved = get_approved_namespaces()
        services = get_loadbalancer_services()

        print(f"âœ… Approved namespaces: {approved}")
        deleted_count = 0

        for svc in services:
            ns = svc["metadata"]["namespace"]
            name = svc["metadata"]["name"]
            svc_type = svc["spec"].get("type", "")
            if svc_type == "LoadBalancer" and ns not in approved:
                delete_service(ns, name)
                deleted_count += 1

        print(f"Cleanup complete. {deleted_count} LoadBalancer service(s) deleted.")

    if __name__ == "__main__":
        main()
